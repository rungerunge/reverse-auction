{% comment %}
  Auction Timer Snippet - Simplified Version
  
  Instructions:
  1. Add this snippet to your product template:
     {% render 'auction-timer' %}
  
  2. Make sure your server URL is correctly set in the script below
{% endcomment %}

<div class="auction-timer" id="auction-timer" style="display: none;">
  <div class="auction-timer__content">
    <div class="auction-timer__discount">
      <span class="discount-percent">0</span>% OFF
    </div>
    <div class="auction-timer__countdown">
      <span class="auction-timer__label">Next price drop in:</span>
      <div class="auction-timer__time">
        <span class="countdown-display">00:00:00</span>
      </div>
    </div>
  </div>
</div>

<style>
.auction-timer {
  background: #f8f8f8;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 15px;
  margin: 15px 0;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.auction-timer__discount {
  font-size: 1.4em;
  font-weight: bold;
  color: #e74c3c;
  margin-bottom: 10px;
}

.discount-percent {
  font-size: 1.6em;
}

.auction-timer__countdown {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.auction-timer__label {
  font-size: 0.9em;
  color: #666;
  margin-bottom: 5px;
}

.auction-timer__time {
  font-family: monospace;
  font-size: 1.4em;
  font-weight: bold;
  background: #333;
  color: #fff;
  padding: 5px 10px;
  border-radius: 4px;
  letter-spacing: 2px;
}

@media (min-width: 768px) {
  .auction-timer__countdown {
    flex-direction: row;
  }
  
  .auction-timer__label {
    margin-bottom: 0;
    margin-right: 10px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const timerElement = document.getElementById('auction-timer');
  if (!timerElement) {
    console.error('Auction timer element not found');
    return;
  }
  
  // Set this to your server URL
  const statusUrl = 'https://reverse-auction.onrender.com/api/auction-status';
  
  let countdown;
  let nextUpdateTime;
  
  // Format time as HH:MM:SS
  function formatTime(hours, minutes, seconds) {
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }
  
  // Function to fetch auction status
  async function fetchAuctionStatus() {
    try {
      console.log('Fetching auction status from:', statusUrl);
      const response = await fetch(statusUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        },
        cache: 'no-store',
        credentials: 'omit' // Don't send cookies for cross-origin requests
      });
      
      if (!response.ok) {
        console.error('Error fetching auction status:', response.status, response.statusText);
        return false;
      }
      
      const data = await response.json();
      console.log('Auction data received:', data);
      
      if (!data.isRunning) {
        console.log('No active auction running');
        timerElement.style.display = 'none';
        return false;
      }
      
      // Update timer display with current discount
      const discountElement = timerElement.querySelector('.discount-percent');
      if (discountElement) {
        discountElement.textContent = data.currentDiscountPercent;
      }
      
      // Store the next update time
      nextUpdateTime = new Date(data.nextUpdateTime);
      
      // Show the timer
      timerElement.style.display = 'block';
      
      return true;
    } catch (error) {
      console.error('Error fetching auction status:', error);
      return false;
    }
  }
  
  // Function to update the countdown display
  function updateTimerDisplay() {
    if (!nextUpdateTime) return;
    
    const now = new Date();
    const timeRemaining = Math.max(0, nextUpdateTime - now);
    
    // If time has expired, refresh auction status
    if (timeRemaining <= 0) {
      clearInterval(countdown);
      
      // Display zeros while waiting for update
      const countdownDisplay = timerElement.querySelector('.countdown-display');
      if (countdownDisplay) {
        countdownDisplay.textContent = formatTime(0, 0, 0);
      }
      
      // Wait a moment to let the server update prices
      setTimeout(function() {
        fetchAuctionStatus().then(isRunning => {
          if (isRunning) {
            countdown = setInterval(updateTimerDisplay, 1000);
          }
        });
      }, 3000);
      return;
    }
    
    // Calculate hours, minutes, seconds
    const hours = Math.floor(timeRemaining / (1000 * 60 * 60));
    const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
    
    // Update timer display with formatted time
    const countdownDisplay = timerElement.querySelector('.countdown-display');
    if (countdownDisplay) {
      countdownDisplay.textContent = formatTime(hours, minutes, seconds);
    }
  }
  
  // Initial fetch and setup
  console.log('Initializing auction timer');
  fetchAuctionStatus().then(isRunning => {
    console.log('Auction running:', isRunning);
    if (isRunning) {
      // Update the display immediately, then every second
      updateTimerDisplay();
      countdown = setInterval(updateTimerDisplay, 1000);
      console.log('Countdown timer started');
    }
  });
  
  // Refresh auction status periodically (every 30 seconds)
  setInterval(function() {
    fetchAuctionStatus();
  }, 30000);
});
</script> 