{% comment %}
  Standalone Auction Timer Section
  
  This is a completely standalone timer with no server connection.
  It calculates discounts and countdowns based on the configured settings.
{% endcomment %}

<div class="auction-timer" id="auction-timer">
  <div class="auction-timer__content">
    <div class="auction-timer__discount">
      <span id="current-discount">{{ section.settings.starting_discount }}</span>% OFF
    </div>
    {% if section.settings.show_next_discount %}
    <div class="auction-timer__next-discount">
      Next: <span id="next-discount">{{ section.settings.starting_discount | plus: section.settings.discount_increment }}</span>% OFF
    </div>
    {% endif %}
    <div class="auction-timer__countdown">
      <span class="auction-timer__label">{{ section.settings.countdown_text }}</span>
      <div class="auction-timer__time">
        <span id="countdown">00:00:00</span>
      </div>
    </div>
  </div>
</div>

<style>
.auction-timer {
  background: {{ section.settings.background_color }};
  border: 1px solid {{ section.settings.border_color }};
  border-radius: 4px;
  padding: 15px;
  margin: 15px 0;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.auction-timer__discount {
  font-size: 1.4em;
  font-weight: bold;
  color: {{ section.settings.discount_color }};
  margin-bottom: 5px;
}

.auction-timer__next-discount {
  font-size: 0.9em;
  color: {{ section.settings.discount_color }};
  margin-bottom: 10px;
  opacity: 0.8;
}

.auction-timer__countdown {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.auction-timer__label {
  font-size: 0.9em;
  color: {{ section.settings.text_color }};
  margin-bottom: 5px;
}

.auction-timer__time {
  font-family: monospace;
  font-size: 1.4em;
  font-weight: bold;
  background: {{ section.settings.timer_background }};
  color: {{ section.settings.timer_color }};
  padding: 5px 10px;
  border-radius: 4px;
  letter-spacing: 2px;
}

@media (min-width: 768px) {
  .auction-timer__countdown {
    flex-direction: row;
  }
  
  .auction-timer__label {
    margin-bottom: 0;
    margin-right: 10px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get timer elements
  const timerElement = document.getElementById('auction-timer');
  const currentDiscountElement = document.getElementById('current-discount');
  const nextDiscountElement = document.getElementById('next-discount');
  const countdownElement = document.getElementById('countdown');
  
  // Parse settings
  const startDate = "{{ section.settings.start_date }}";
  const startHour = parseInt("{{ section.settings.start_hour }}") || 0;
  const startMinute = parseInt("{{ section.settings.start_minute }}") || 0;
  
  const startingDiscount = parseInt("{{ section.settings.starting_discount }}") || 0;
  const intervalMinutes = parseInt("{{ section.settings.interval_minutes }}") || 1;
  const discountIncrement = parseInt("{{ section.settings.discount_increment }}") || 5;
  const maxDiscount = parseInt("{{ section.settings.max_discount }}") || 100;
  const showNextDiscount = {{ section.settings.show_next_discount | json }};
  
  // Format time as HH:MM:SS
  function formatTime(hours, minutes, seconds) {
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }
  
  // Convert the configured date and time to a Date object
  function getStartTime() {
    try {
      if (startDate && startDate !== "") {
        // Parse date components
        const [year, month, day] = startDate.split('-').map(Number);
        
        // Create date in local timezone first for simpler handling
        const date = new Date(year, month - 1, day, startHour, startMinute, 0);
        console.log("Start time:", date);
        return date;
      } else {
        // Default to now if no date provided
        return new Date();
      }
    } catch (error) {
      console.error('Error parsing start time:', error);
      return new Date(); // Return current time as fallback
    }
  }
  
  // Calculate current discount and time until next discount
  function calculateState() {
    const now = new Date();
    const startTime = getStartTime();
    
    // If auction hasn't started yet
    if (now < startTime) {
      return {
        started: false,
        currentDiscount: startingDiscount,
        nextDiscount: startingDiscount,
        nextUpdateTime: startTime,
        completed: false
      };
    }
    
    // Calculate elapsed time in milliseconds
    const elapsed = now - startTime;
    const intervalMs = intervalMinutes * 60 * 1000;
    
    // Calculate intervals elapsed
    const intervalsElapsed = Math.floor(elapsed / intervalMs);
    
    // Calculate current discount percentage
    const currentDiscount = Math.min(startingDiscount + (intervalsElapsed * discountIncrement), maxDiscount);
    
    // Calculate next discount (if not at max)
    const nextDiscount = Math.min(currentDiscount + discountIncrement, maxDiscount);
    
    // Calculate time until next interval
    const timeToNextInterval = intervalMs - (elapsed % intervalMs);
    const nextUpdateTime = new Date(now.getTime() + timeToNextInterval);
    
    // Check if we've reached maximum discount
    const completed = currentDiscount >= maxDiscount;
    
    return {
      started: true,
      currentDiscount: currentDiscount,
      nextDiscount: nextDiscount,
      nextUpdateTime: nextUpdateTime,
      completed: completed
    };
  }
  
  // Update the timer display
  function updateDisplay() {
    const state = calculateState();
    
    // Update current discount
    if (currentDiscountElement) {
      currentDiscountElement.textContent = state.currentDiscount;
    }
    
    // Update next discount if not completed
    if (nextDiscountElement) {
      if (showNextDiscount && !state.completed) {
        nextDiscountElement.parentElement.style.display = '';
        nextDiscountElement.textContent = state.nextDiscount;
      } else {
        nextDiscountElement.parentElement.style.display = 'none';
      }
    }
    
    // Handle countdown
    if (countdownElement) {
      if (state.completed) {
        // If reached maximum discount
        countdownElement.textContent = "{{ section.settings.completed_text }}";
        
        // Hide timer after reaching max discount?
        if ({{ section.settings.hide_when_completed | json }}) {
          setTimeout(function() {
            timerElement.style.display = 'none';
          }, 5000); // Wait 5 seconds before hiding
        }
      } else {
        // Calculate time remaining
        const now = new Date();
        const timeRemaining = Math.max(0, state.nextUpdateTime - now);
        
        // If time remaining has reached zero, refresh the display immediately
        if (timeRemaining <= 0) {
          setTimeout(updateDisplay, 10); // Tiny delay to avoid recursion
          return;
        }
        
        // Calculate hours, minutes, seconds
        const hours = Math.floor(timeRemaining / (1000 * 60 * 60));
        const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
        
        // Update the countdown display
        countdownElement.textContent = formatTime(hours, minutes, seconds);
      }
    }
  }
  
  // Initial update
  updateDisplay();
  
  // Update every second
  setInterval(updateDisplay, 1000);
});
</script>

{% schema %}
{
  "name": "Auction Timer",
  "settings": [
    {
      "type": "header",
      "content": "Schedule Settings"
    },
    {
      "type": "text",
      "id": "start_date",
      "label": "Start Date",
      "info": "Format: YYYY-MM-DD (e.g., 2025-05-31)",
      "placeholder": "2025-05-31"
    },
    {
      "type": "select",
      "id": "start_hour",
      "label": "Start Hour",
      "options": [
        { "value": "0", "label": "00:00 (12 AM)" },
        { "value": "1", "label": "01:00 (1 AM)" },
        { "value": "2", "label": "02:00 (2 AM)" },
        { "value": "3", "label": "03:00 (3 AM)" },
        { "value": "4", "label": "04:00 (4 AM)" },
        { "value": "5", "label": "05:00 (5 AM)" },
        { "value": "6", "label": "06:00 (6 AM)" },
        { "value": "7", "label": "07:00 (7 AM)" },
        { "value": "8", "label": "08:00 (8 AM)" },
        { "value": "9", "label": "09:00 (9 AM)" },
        { "value": "10", "label": "10:00 (10 AM)" },
        { "value": "11", "label": "11:00 (11 AM)" },
        { "value": "12", "label": "12:00 (12 PM)" },
        { "value": "13", "label": "13:00 (1 PM)" },
        { "value": "14", "label": "14:00 (2 PM)" },
        { "value": "15", "label": "15:00 (3 PM)" },
        { "value": "16", "label": "16:00 (4 PM)" },
        { "value": "17", "label": "17:00 (5 PM)" },
        { "value": "18", "label": "18:00 (6 PM)" },
        { "value": "19", "label": "19:00 (7 PM)" },
        { "value": "20", "label": "20:00 (8 PM)" },
        { "value": "21", "label": "21:00 (9 PM)" },
        { "value": "22", "label": "22:00 (10 PM)" },
        { "value": "23", "label": "23:00 (11 PM)" }
      ],
      "default": "12"
    },
    {
      "type": "select",
      "id": "start_minute",
      "label": "Start Minute",
      "options": [
        { "value": "0", "label": "00" },
        { "value": "5", "label": "05" },
        { "value": "10", "label": "10" },
        { "value": "15", "label": "15" },
        { "value": "20", "label": "20" },
        { "value": "25", "label": "25" },
        { "value": "30", "label": "30" },
        { "value": "35", "label": "35" },
        { "value": "40", "label": "40" },
        { "value": "45", "label": "45" },
        { "value": "50", "label": "50" },
        { "value": "55", "label": "55" }
      ],
      "default": "0"
    },
    {
      "type": "header",
      "content": "Discount Settings"
    },
    {
      "type": "range",
      "id": "starting_discount",
      "label": "Starting Discount Percentage",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 5
    },
    {
      "type": "range",
      "id": "interval_minutes",
      "label": "Interval Between Discounts (minutes)",
      "min": 1,
      "max": 60,
      "step": 1,
      "default": 1
    },
    {
      "type": "range",
      "id": "discount_increment",
      "label": "Discount Increment Per Interval",
      "min": 1,
      "max": 20,
      "step": 1,
      "default": 5
    },
    {
      "type": "range",
      "id": "max_discount",
      "label": "Maximum Discount Percentage",
      "min": 5,
      "max": 100,
      "step": 5,
      "default": 100
    },
    {
      "type": "checkbox",
      "id": "show_next_discount",
      "label": "Show Next Discount Level",
      "default": true
    },
    {
      "type": "header",
      "content": "Text Settings"
    },
    {
      "type": "text",
      "id": "countdown_text",
      "label": "Countdown Label",
      "default": "Next price drop in:"
    },
    {
      "type": "text",
      "id": "completed_text",
      "label": "Text When Maximum Discount Reached",
      "default": "MAXIMUM DISCOUNT!"
    },
    {
      "type": "checkbox",
      "id": "hide_when_completed",
      "label": "Hide timer when maximum discount reached",
      "default": false
    },
    {
      "type": "header",
      "content": "Style Settings"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border Color",
      "default": "#ddd"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#666"
    },
    {
      "type": "color",
      "id": "discount_color",
      "label": "Discount Text Color",
      "default": "#e74c3c"
    },
    {
      "type": "color",
      "id": "timer_background",
      "label": "Timer Background",
      "default": "#333"
    },
    {
      "type": "color",
      "id": "timer_color",
      "label": "Timer Text Color",
      "default": "#fff"
    }
  ],
  "presets": [
    {
      "name": "Auction Timer",
      "category": "Custom"
    }
  ]
}
{% endschema %} 