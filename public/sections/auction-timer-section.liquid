{% comment %}
  Standalone Timezone-Based Auction Timer Section
  
  This section shows a countdown timer based on the specified CET time,
  with interval-based discount increases.
{% endcomment %}

<div class="auction-timer-standalone" id="auction-timer-standalone">
  <div class="auction-timer__content">
    <div class="auction-timer__discount">
      <span class="discount-percent" id="current-discount">{{ section.settings.starting_discount_percent }}</span>% OFF
    </div>
    {% if section.settings.show_next_discount %}
    <div class="auction-timer__next-discount">
      Next: <span class="next-discount-percent" id="next-discount">{{ section.settings.starting_discount_percent | plus: section.settings.discount_increment }}</span>% OFF
    </div>
    {% endif %}
    <div class="auction-timer__countdown">
      <span class="auction-timer__label">{{ section.settings.countdown_text }}</span>
      <div class="auction-timer__time">
        <span class="countdown-display">00:00:00</span>
      </div>
    </div>
  </div>
</div>

<style>
.auction-timer-standalone {
  background: {{ section.settings.background_color }};
  border: 1px solid {{ section.settings.border_color }};
  border-radius: 4px;
  padding: 15px;
  margin: 15px 0;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.auction-timer__discount {
  font-size: 1.4em;
  font-weight: bold;
  color: {{ section.settings.discount_color }};
  margin-bottom: 5px;
}

.auction-timer__next-discount {
  font-size: 0.9em;
  color: {{ section.settings.discount_color }};
  margin-bottom: 10px;
  opacity: 0.8;
}

.discount-percent {
  font-size: 1.6em;
}

.auction-timer__countdown {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.auction-timer__label {
  font-size: 0.9em;
  color: {{ section.settings.text_color }};
  margin-bottom: 5px;
}

.auction-timer__time {
  font-family: monospace;
  font-size: 1.4em;
  font-weight: bold;
  background: {{ section.settings.timer_background }};
  color: {{ section.settings.timer_color }};
  padding: 5px 10px;
  border-radius: 4px;
  letter-spacing: 2px;
}

@media (min-width: 768px) {
  .auction-timer__countdown {
    flex-direction: row;
  }
  
  .auction-timer__label {
    margin-bottom: 0;
    margin-right: 10px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const timerElement = document.getElementById('auction-timer-standalone');
  const currentDiscountElement = document.getElementById('current-discount');
  const nextDiscountElement = document.getElementById('next-discount');
  
  if (!timerElement) {
    console.error('Standalone auction timer element not found');
    return;
  }
  
  // Get configured time settings from section settings
  // Legacy text field support
  const cetStartTimeText = "{{ section.settings.start_time }}"; // Format: "YYYY-MM-DD HH:MM:SS"
  
  // New calendar picker fields
  const startDate = "{{ section.settings.start_date }}"; // Format: YYYY-MM-DD
  const startHour = parseInt("{{ section.settings.start_hour }}") || 0;
  const startMinute = parseInt("{{ section.settings.start_minute }}") || 0;
  
  const startingDiscount = parseInt("{{ section.settings.starting_discount_percent }}") || 0;
  const intervalMinutes = parseInt("{{ section.settings.interval_minutes }}") || 60;
  const discountIncrement = parseInt("{{ section.settings.discount_increment }}") || 5;
  const maxDiscount = parseInt("{{ section.settings.max_discount_percent }}") || 50;
  const showNextDiscount = {% if section.settings.show_next_discount %}true{% else %}false{% endif %};
  
  // Format time as HH:MM:SS
  function formatTime(hours, minutes, seconds) {
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }
  
  // Convert the selected date and time to a Date object
  function getStartTime() {
    try {
      // Check if we should use the calendar fields or the legacy text input
      if (startDate && startDate !== "") {
        // Parse the selected date and time
        const [year, month, day] = startDate.split('-').map(Number);
        
        // Create a date in CET timezone (approximately)
        // Note that this is just an approximation since JavaScript doesn't handle timezones well
        const cetDate = new Date(Date.UTC(
          year,
          month - 1, // JavaScript months are 0-indexed
          day,
          startHour - 1, // -1 hour to adjust for CET being UTC+1
          startMinute,
          0 // seconds
        ));
        
        return cetDate;
      } else {
        // Fall back to the text field if the date picker isn't used
        return parseCETTime(cetStartTimeText);
      }
    } catch (error) {
      console.error('Error parsing start time:', error);
      // Return a default time 1 hour in the future if parsing fails
      const defaultTime = new Date();
      defaultTime.setHours(defaultTime.getHours() + 1);
      return defaultTime;
    }
  }
  
  // Convert CET time string to Date object (legacy support)
  function parseCETTime(timeString) {
    try {
      // Parse the CET time string
      const [datePart, timePart] = timeString.split(' ');
      const [year, month, day] = datePart.split('-');
      const [hours, minutes, seconds] = timePart.split(':');
      
      // Create a date object in CET timezone
      // Note: JavaScript dates have month 0-11, so we subtract 1 from the month
      const cetDate = new Date(Date.UTC(
        parseInt(year), 
        parseInt(month) - 1, 
        parseInt(day), 
        parseInt(hours) - 1, // Adjust for CET being UTC+1
        parseInt(minutes), 
        parseInt(seconds) || 0
      ));
      
      return cetDate;
    } catch (error) {
      console.error('Error parsing time:', error);
      return null;
    }
  }
  
  // Calculate discount and next interval based on elapsed time
  function calculateDiscountState(startTime) {
    const now = new Date();
    if (now < startTime) {
      // Sale hasn't started yet
      return {
        hasStarted: false,
        currentDiscount: startingDiscount,
        nextDiscount: startingDiscount,
        nextUpdateTime: startTime,
        isCompleted: false
      };
    }
    
    // Calculate time elapsed since start in milliseconds
    const elapsed = now - startTime;
    const intervalMs = intervalMinutes * 60 * 1000;
    
    // Calculate how many full intervals have passed
    const intervalsElapsed = Math.floor(elapsed / intervalMs);
    
    // Calculate current discount
    const currentDiscount = Math.min(startingDiscount + (intervalsElapsed * discountIncrement), maxDiscount);
    
    // Calculate next discount
    const nextDiscount = Math.min(currentDiscount + discountIncrement, maxDiscount);
    
    // Calculate time until next interval
    const nextUpdateTime = new Date(startTime.getTime() + ((intervalsElapsed + 1) * intervalMs));
    
    // Check if we've reached max discount
    const isCompleted = currentDiscount >= maxDiscount;
    
    return {
      hasStarted: true,
      currentDiscount,
      nextDiscount,
      nextUpdateTime,
      isCompleted
    };
  }
  
  // Function to update the timer display
  function updateTimerDisplay() {
    const startTime = getStartTime();
    if (!startTime) {
      timerElement.style.display = "none";
      return;
    }
    
    const discountState = calculateDiscountState(startTime);
    
    // Update the discount display
    if (currentDiscountElement) {
      currentDiscountElement.textContent = discountState.currentDiscount;
    }
    
    // Update next discount if enabled
    if (showNextDiscount && nextDiscountElement && !discountState.isCompleted) {
      nextDiscountElement.textContent = discountState.nextDiscount;
      nextDiscountElement.parentElement.style.display = 'block';
    } else if (nextDiscountElement) {
      nextDiscountElement.parentElement.style.display = 'none';
    }
    
    // Handle countdown display
    const countdownDisplay = timerElement.querySelector('.countdown-display');
    if (!countdownDisplay) return;
    
    const now = new Date();
    
    if (!discountState.hasStarted) {
      // Countdown to start
      const timeToStart = Math.max(0, startTime - now);
      
      if (timeToStart <= 0) {
        // Refresh the page once the sale starts
        window.location.reload();
        return;
      }
      
      // Calculate hours, minutes, seconds until start
      const hours = Math.floor(timeToStart / (1000 * 60 * 60));
      const minutes = Math.floor((timeToStart % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeToStart % (1000 * 60)) / 1000);
      
      countdownDisplay.textContent = formatTime(hours, minutes, seconds);
    } else if (discountState.isCompleted) {
      // Sale completed at max discount
      countdownDisplay.textContent = "{{ section.settings.completed_text }}";
      
      // Hide timer after expired duration if set
      if ({% if section.settings.hide_when_completed %}true{% else %}false{% endif %}) {
        setTimeout(() => {
          timerElement.style.display = "none";
        }, 5000); // Wait 5 seconds before hiding
      }
    } else {
      // Countdown to next discount increase
      const timeToNextUpdate = Math.max(0, discountState.nextUpdateTime - now);
      
      // If time has expired, refresh to get the new discount
      if (timeToNextUpdate <= 0) {
        // Auto refresh to show the new discount
        window.location.reload();
        return;
      }
      
      // Calculate hours, minutes, seconds
      const hours = Math.floor(timeToNextUpdate / (1000 * 60 * 60));
      const minutes = Math.floor((timeToNextUpdate % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeToNextUpdate % (1000 * 60)) / 1000);
      
      countdownDisplay.textContent = formatTime(hours, minutes, seconds);
    }
  }
  
  // Initial update
  updateTimerDisplay();
  
  // Update every second
  setInterval(updateTimerDisplay, 1000);
});
</script>

{% schema %}
{
  "name": "Auction Timer",
  "settings": [
    {
      "type": "header",
      "content": "Auction Schedule Settings"
    },
    {
      "type": "text",
      "id": "start_time",
      "label": "Start Time (CET)",
      "info": "Format: YYYY-MM-DD HH:MM:SS, e.g. 2023-12-31 12:00:00",
      "default": "2023-12-31 12:00:00"
    },
    {
      "type": "date",
      "id": "start_date",
      "label": "Start Date",
      "info": "The date when the auction will start"
    },
    {
      "type": "select",
      "id": "start_hour",
      "label": "Start Hour (CET)",
      "options": [
        { "value": "0", "label": "00:00 (12 AM)" },
        { "value": "1", "label": "01:00 (1 AM)" },
        { "value": "2", "label": "02:00 (2 AM)" },
        { "value": "3", "label": "03:00 (3 AM)" },
        { "value": "4", "label": "04:00 (4 AM)" },
        { "value": "5", "label": "05:00 (5 AM)" },
        { "value": "6", "label": "06:00 (6 AM)" },
        { "value": "7", "label": "07:00 (7 AM)" },
        { "value": "8", "label": "08:00 (8 AM)" },
        { "value": "9", "label": "09:00 (9 AM)" },
        { "value": "10", "label": "10:00 (10 AM)" },
        { "value": "11", "label": "11:00 (11 AM)" },
        { "value": "12", "label": "12:00 (12 PM)" },
        { "value": "13", "label": "13:00 (1 PM)" },
        { "value": "14", "label": "14:00 (2 PM)" },
        { "value": "15", "label": "15:00 (3 PM)" },
        { "value": "16", "label": "16:00 (4 PM)" },
        { "value": "17", "label": "17:00 (5 PM)" },
        { "value": "18", "label": "18:00 (6 PM)" },
        { "value": "19", "label": "19:00 (7 PM)" },
        { "value": "20", "label": "20:00 (8 PM)" },
        { "value": "21", "label": "21:00 (9 PM)" },
        { "value": "22", "label": "22:00 (10 PM)" },
        { "value": "23", "label": "23:00 (11 PM)" }
      ],
      "default": "12"
    },
    {
      "type": "select",
      "id": "start_minute",
      "label": "Start Minute",
      "options": [
        { "value": "0", "label": "00" },
        { "value": "5", "label": "05" },
        { "value": "10", "label": "10" },
        { "value": "15", "label": "15" },
        { "value": "20", "label": "20" },
        { "value": "25", "label": "25" },
        { "value": "30", "label": "30" },
        { "value": "35", "label": "35" },
        { "value": "40", "label": "40" },
        { "value": "45", "label": "45" },
        { "value": "50", "label": "50" },
        { "value": "55", "label": "55" }
      ],
      "default": "0"
    },
    {
      "type": "header",
      "content": "Discount Settings"
    },
    {
      "type": "number",
      "id": "starting_discount_percent",
      "label": "Starting Discount Percentage",
      "default": 10
    },
    {
      "type": "number",
      "id": "interval_minutes",
      "label": "Interval Between Discounts (minutes)",
      "default": 60
    },
    {
      "type": "number",
      "id": "discount_increment",
      "label": "Discount Increment Per Interval",
      "default": 5
    },
    {
      "type": "number",
      "id": "max_discount_percent",
      "label": "Maximum Discount Percentage",
      "default": 50
    },
    {
      "type": "checkbox",
      "id": "show_next_discount",
      "label": "Show Next Discount Level",
      "default": true
    },
    {
      "type": "header",
      "content": "Text Settings"
    },
    {
      "type": "text",
      "id": "countdown_text",
      "label": "Countdown Label",
      "default": "Next price drop in:"
    },
    {
      "type": "text",
      "id": "completed_text",
      "label": "Text When Maximum Discount Reached",
      "default": "MAXIMUM DISCOUNT!"
    },
    {
      "type": "checkbox",
      "id": "hide_when_completed",
      "label": "Hide timer when maximum discount reached",
      "default": false
    },
    {
      "type": "header",
      "content": "Style Settings"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border Color",
      "default": "#ddd"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#666"
    },
    {
      "type": "color",
      "id": "discount_color",
      "label": "Discount Text Color",
      "default": "#e74c3c"
    },
    {
      "type": "color",
      "id": "timer_background",
      "label": "Timer Background",
      "default": "#333"
    },
    {
      "type": "color",
      "id": "timer_color",
      "label": "Timer Text Color",
      "default": "#fff"
    }
  ],
  "presets": [
    {
      "name": "Auction Timer",
      "category": "Custom"
    }
  ]
}
{% endschema %} 