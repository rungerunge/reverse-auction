{%- comment -%}
  Auction Timer Section
  
  This section can be added to any page in your Shopify theme.
  It displays a countdown to the next price drop in the auction.
{%- endcomment -%}

<div class="auction-timer-section">
  <div class="auction-timer" id="auction-timer" style="display: none;">
    <div class="auction-timer__content">
      <div class="auction-timer__discount">
        <span class="discount-percent">0</span>% OFF
      </div>
      <div class="auction-timer__countdown">
        <span class="auction-timer__label">Next price drop in:</span>
        <div class="auction-timer__time">
          <span class="hours">00</span>:<span class="minutes">00</span>:<span class="seconds">00</span>
        </div>
      </div>
    </div>
  </div>
  
  <style>
  .auction-timer {
    background: #f8f8f8;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 15px;
    margin: 15px 0;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .auction-timer__discount {
    font-size: 1.4em;
    font-weight: bold;
    color: #e74c3c;
    margin-bottom: 10px;
  }
  
  .discount-percent {
    font-size: 1.6em;
  }
  
  .auction-timer__countdown {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  
  .auction-timer__label {
    font-size: 0.9em;
    color: #666;
    margin-bottom: 5px;
  }
  
  .auction-timer__time {
    font-family: monospace;
    font-size: 1.4em;
    font-weight: bold;
    background: #333;
    color: #fff;
    padding: 5px 10px;
    border-radius: 4px;
    letter-spacing: 2px;
  }
  
  @media (min-width: 768px) {
    .auction-timer__countdown {
      flex-direction: row;
    }
    
    .auction-timer__label {
      margin-bottom: 0;
      margin-right: 10px;
    }
  }
  </style>
  
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const timerElement = document.getElementById('auction-timer');
    if (!timerElement) return;
    
    // FOR DEBUGGING: Show timer regardless of auction status
    console.log('Auction Timer Debug: Timer element found, making visible for testing');
    timerElement.style.display = 'block';
    timerElement.querySelector('.discount-percent').textContent = '5';
    
    // The URL for your auction status API
    const statusUrl = 'https://reverse-auction.onrender.com/api/auction-status';
    
    let countdown;
    let nextUpdateTime;
    
    // Function to fetch auction status
    async function fetchAuctionStatus() {
      try {
        const response = await fetch(statusUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'omit' // Don't send cookies for cross-origin requests
        });
        if (!response.ok) {
          console.error('Error fetching auction status:', response.statusText);
          return false;
        }
        
        const data = await response.json();
        
        if (!data.isRunning) {
          timerElement.style.display = 'none';
          return false;
        }
        
        // Update timer display with current discount
        timerElement.querySelector('.discount-percent').textContent = data.currentDiscountPercent;
        
        // Store the next update time
        nextUpdateTime = new Date(data.nextUpdateTime);
        
        // Show the timer
        timerElement.style.display = 'block';
        
        return true;
      } catch (error) {
        console.error('Error fetching auction status:', error);
        return false;
      }
    }
    
    // Function to update the countdown display
    function updateTimerDisplay() {
      if (!nextUpdateTime) return;
      
      const now = new Date();
      const timeRemaining = Math.max(0, nextUpdateTime - now);
      
      // If time has expired, refresh auction status
      if (timeRemaining <= 0) {
        clearInterval(countdown);
        // Wait a moment to let the server update prices
        setTimeout(function() {
          fetchAuctionStatus().then(isRunning => {
            if (isRunning) {
              countdown = setInterval(updateTimerDisplay, 1000);
            }
          });
        }, 3000);
        return;
      }
      
      // Calculate hours, minutes, seconds
      const hours = Math.floor(timeRemaining / (1000 * 60 * 60));
      const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
      
      // Update timer display
      timerElement.querySelector('.hours').textContent = hours.toString().padStart(2, '0');
      timerElement.querySelector('.minutes').textContent = minutes.toString().padStart(2, '0');
      timerElement.querySelector('.seconds').textContent = seconds.toString().padStart(2, '0');
    }
    
    // Initial fetch and setup
    fetchAuctionStatus().then(isRunning => {
      if (isRunning) {
        // Update the display immediately, then every second
        updateTimerDisplay();
        countdown = setInterval(updateTimerDisplay, 1000);
      }
    });
    
    // Refresh auction status periodically (every 30 seconds)
    setInterval(function() {
      fetchAuctionStatus();
    }, 30000);
  });
  </script>
</div>

{% schema %}
{
  "name": "Auction Timer",
  "settings": [],
  "presets": [
    {
      "name": "Auction Timer",
      "category": "Custom"
    }
  ]
}
{% endschema %} 